var search_data = {"index":{"searchIndex":["ald","definition","generator","invaliddefinitionerror","invalidpackageerror","nodefinitionerror","package","generator","attribute_hash()","authors()","close()","definition()","description()","from_package()","generate!()","generate!()","id()","links()","name()","new()","new()","open()","schema()","summary()","tags()","to_s()","type()","valid?()","valid?()","valid?()","valid?()","version()"],"longSearchIndex":["ald","ald::definition","ald::definition::generator","ald::invaliddefinitionerror","ald::invalidpackageerror","ald::nodefinitionerror","ald::package","ald::package::generator","ald::definition#attribute_hash()","ald::definition#authors()","ald::package#close()","ald::package::generator#definition()","ald::definition#description()","ald::package::generator::from_package()","ald::definition::generator#generate!()","ald::package::generator#generate!()","ald::definition#id()","ald::definition#links()","ald::definition#name()","ald::definition::new()","ald::package::new()","ald::package::open()","ald::definition::schema()","ald::definition#summary()","ald::definition#tags()","ald::definition#to_s()","ald::definition#type()","ald::definition#valid?()","ald::definition::generator#valid?()","ald::package::valid?()","ald::package::generator#valid?()","ald::definition#version()"],"info":[["ALD","","ALD.html","",""],["ALD::Definition","","ALD/Definition.html","","<p>Access information in ALD package definition files.\n"],["ALD::Definition::Generator","","ALD/Definition/Generator.html","",""],["ALD::InvalidDefinitionError","","ALD/InvalidDefinitionError.html","",""],["ALD::InvalidPackageError","","ALD/InvalidPackageError.html","",""],["ALD::NoDefinitionError","","ALD/NoDefinitionError.html","",""],["ALD::Package","","ALD/Package.html","","<p>Represents an ALD package file containing an app or library and its\ndefinition.\n"],["ALD::Package::Generator","","ALD/Package/Generator.html","",""],["attribute_hash","ALD::Definition","ALD/Definition.html#method-i-attribute_hash","(xpath, keys)","<p>Get an Array of attribute Hashes from a list of elements in the definition.\n<p>xpath &mdash; the XPath String pointing …\n"],["authors","ALD::Definition","ALD/Definition.html#method-i-authors","()","<p>Get the item&#39;s authors information\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">definition</span>.<span class=\"ruby-identifier\">authors</span>.<span class=\"ruby-identifier\">each</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">author</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-node\">&quot;Author: #{author[&#39;name&#39;]}&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["close","ALD::Package","ALD/Package.html#method-i-close","()","<p>Closes a no longer required package. While this method has little effect\nfor now, calling it should be …\n"],["definition","ALD::Package::Generator","ALD/Package/Generator.html#method-i-definition","()",""],["description","ALD::Definition","ALD/Definition.html#method-i-description","()","<p>Get the defined item&#39;s description.\n<p>Returns the description String.\n"],["from_package","ALD::Package::Generator","ALD/Package/Generator.html#method-c-from_package","(package)",""],["generate!","ALD::Definition::Generator","ALD/Definition/Generator.html#method-i-generate-21","()",""],["generate!","ALD::Package::Generator","ALD/Package/Generator.html#method-i-generate-21","(path)","<p>Creates a new package file from the given data\n<p>generator &mdash; an ALD::Package::Generator instance to create …\n"],["id","ALD::Definition","ALD/Definition.html#method-i-id",null,"<p>Gets the ID of the item to be represented by this definition.\n<p>Examples\n\n<pre>puts &quot;Item ID: #{definition.id}&quot;</pre>\n"],["links","ALD::Definition","ALD/Definition.html#method-i-links","()","<p>Gets additional links this definition references\n<p>Returns an Array of Hashes, where each Hash has the keys …\n"],["name","ALD::Definition","ALD/Definition.html#method-i-name",null,"<p>Gets the name of the item defined by this definition.\n<p>Examples\n\n<pre>puts &quot;The item is called &#39;#{definition.name}&#39;&quot;</pre>\n"],["new","ALD::Definition","ALD/Definition.html#method-c-new","(source)","<p>Open a new definition file for analysis.\n<p>source &mdash; the source to read the definition from. This can be a …\n\n"],["new","ALD::Package","ALD/Package.html#method-c-new","(file)","<p>Opens a new ALD package file.\n<p>file &mdash; a String representing the path to the file or a Zip::File instance …\n\n"],["open","ALD::Package","ALD/Package.html#method-c-open","(file)","<p>Alias for ::new\n"],["schema","ALD::Definition","ALD/Definition.html#method-c-schema","()","<p>The XML Schema instance used for validation\n<p>Returns the Nokogiri::XML::Schema instance representing ::SCHEMA_FILE …\n"],["summary","ALD::Definition","ALD/Definition.html#method-i-summary",null,"<p>Gets the item&#39;s summary text.\n<p>Examples\n\n<pre>puts &quot;\\n#{definition.summary}\\n&quot;</pre>\n"],["tags","ALD::Definition","ALD/Definition.html#method-i-tags","()","<p>Get the defined item&#39;s tags.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">definition</span>.<span class=\"ruby-identifier\">tags</span>.<span class=\"ruby-identifier\">each</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">tag</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-node\">&quot; - #{tag}&quot;</span> }\n</pre>\n"],["to_s","ALD::Definition","ALD/Definition.html#method-i-to_s","()","<p>Get the XML string representing the definition\n"],["type","ALD::Definition","ALD/Definition.html#method-i-type",null,"<p>Gets the type of item this definition represents.\n<p>Examples\n\n<pre>puts &quot;Item type is #{definition.type}&quot;</pre>\n"],["valid?","ALD::Definition","ALD/Definition.html#method-i-valid-3F","()","<p>Check if the definition is valid. Library consumers need not call this, as\n::new already does.\n<p>Returns …\n"],["valid?","ALD::Definition::Generator","ALD/Definition/Generator.html#method-i-valid-3F","()",""],["valid?","ALD::Package","ALD/Package.html#method-c-valid-3F","(file, definition)","<p>Tests if a given archive is a valid ALD package. Although part of the\npublic API, most library consumers …\n"],["valid?","ALD::Package::Generator","ALD/Package/Generator.html#method-i-valid-3F","()",""],["version","ALD::Definition","ALD/Definition.html#method-i-version",null,"<p>Gets the semver version of this definition&#39;s item.\n<p>Examples\n\n<pre>puts &quot;#{definition.name} v#{definition.version}&quot;</pre>\n"]]}}