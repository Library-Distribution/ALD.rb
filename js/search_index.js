var search_data = {"index":{"searchIndex":["ald","api","authenticationerror","collection","localfilter","collectionentry","conditioned","invalidautherror","item","itemcollection","noautherror","requesterror","unsupportedauthmethoderror","user","usercollection","definition","generator","invaliddefinitionerror","invalidpackageerror","nodefinitionerror","package","generator","[]()","[]()","[]()","apply_conditions()","array_queries()","attribute_hash()","auth=()","auth_method()","authors()","authors()","can_apply?()","close()","create_request()","define_attributes!()","definition()","description()","description()","downloads()","each()","entry()","entry()","entry_filter()","entry_filter()","entry_filter()","exact_queries()","filter()","from_package()","generate!()","generate!()","id()","id()","initialized?()","initialized?()","initialized_attributes()","initialized_attributes()","initialized_attributes()","item()","item()","items()","joined()","links()","mailmd5()","merge_conditions()","merge_ranges()","name()","name()","name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","normalize_id()","open()","present_conditions()","privileges()","range_condition_queries()","range_offset()","range_query()","ratings()","request()","request()","request()","request()","request()","request_entry()","request_entry()","request_with_auth()","requested_attributes()","requested_attributes()","requested_attributes()","reviewed()","schema()","sort()","sort_criteria()","sort_query()","sortings()","summary()","summary()","switch_queries()","tags()","tags()","to_s()","to_sort_hash()","type()","uploaded()","user()","user()","users()","valid?()","valid?()","valid?()","valid?()","valid_auth?()","valid_data?()","version()","version()","version()","where()","where()","where()"],"longSearchIndex":["ald","ald::api","ald::api::authenticationerror","ald::api::collection","ald::api::collection::localfilter","ald::api::collectionentry","ald::api::conditioned","ald::api::invalidautherror","ald::api::item","ald::api::itemcollection","ald::api::noautherror","ald::api::requesterror","ald::api::unsupportedauthmethoderror","ald::api::user","ald::api::usercollection","ald::definition","ald::definition::generator","ald::invaliddefinitionerror","ald::invalidpackageerror","ald::nodefinitionerror","ald::package","ald::package::generator","ald::api::collection#[]()","ald::api::itemcollection#[]()","ald::api::usercollection#[]()","ald::api::collection::localfilter::apply_conditions()","ald::api::conditioned#array_queries()","ald::definition#attribute_hash()","ald::api#auth=()","ald::api#auth_method()","ald::api::item#authors()","ald::definition#authors()","ald::api::collection::localfilter::can_apply?()","ald::package#close()","ald::api#create_request()","ald::api::collectionentry::define_attributes!()","ald::package::generator#definition()","ald::api::item#description()","ald::definition#description()","ald::api::item#downloads()","ald::api::collection#each()","ald::api::itemcollection#entry()","ald::api::usercollection#entry()","ald::api::collection#entry_filter()","ald::api::itemcollection#entry_filter()","ald::api::usercollection#entry_filter()","ald::api::conditioned#exact_queries()","ald::api::collection::localfilter::filter()","ald::package::generator::from_package()","ald::definition::generator#generate!()","ald::package::generator#generate!()","ald::api::user#id()","ald::definition#id()","ald::api::collection#initialized?()","ald::api::collectionentry#initialized?()","ald::api::collectionentry::initialized_attributes()","ald::api::item::initialized_attributes()","ald::api::user::initialized_attributes()","ald::api#item()","ald::api::item#item()","ald::api#items()","ald::api::user#joined()","ald::definition#links()","ald::api::user#mailmd5()","ald::api::conditioned#merge_conditions()","ald::api::conditioned#merge_ranges()","ald::api::item#name()","ald::api::user#name()","ald::definition#name()","ald::api::new()","ald::api::collection::new()","ald::api::collectionentry::new()","ald::api::item::new()","ald::api::itemcollection::new()","ald::api::user::new()","ald::api::usercollection::new()","ald::definition::new()","ald::package::new()","ald::api#normalize_id()","ald::package::open()","ald::api::conditioned#present_conditions()","ald::api::user#privileges()","ald::api::conditioned#range_condition_queries()","ald::api::conditioned#range_offset()","ald::api::conditioned#range_query()","ald::api::item#ratings()","ald::api#request()","ald::api::item#request()","ald::api::itemcollection#request()","ald::api::user#request()","ald::api::usercollection#request()","ald::api::itemcollection#request_entry()","ald::api::usercollection#request_entry()","ald::api#request_with_auth()","ald::api::collectionentry::requested_attributes()","ald::api::item::requested_attributes()","ald::api::user::requested_attributes()","ald::api::item#reviewed()","ald::definition::schema()","ald::api::collection::localfilter::sort()","ald::api::collection::localfilter::sort_criteria()","ald::api::conditioned#sort_query()","ald::api::collection::localfilter::sortings()","ald::api::item#summary()","ald::definition#summary()","ald::api::conditioned#switch_queries()","ald::api::item#tags()","ald::definition#tags()","ald::definition#to_s()","ald::api::collection::localfilter::to_sort_hash()","ald::definition#type()","ald::api::item#uploaded()","ald::api#user()","ald::api::item#user()","ald::api#users()","ald::definition#valid?()","ald::definition::generator#valid?()","ald::package::valid?()","ald::package::generator#valid?()","ald::api#valid_auth?()","ald::api::item::valid_data?()","ald::api#version()","ald::api::item#version()","ald::definition#version()","ald::api::conditioned#where()","ald::api::itemcollection#where()","ald::api::usercollection#where()"],"info":[["ALD","","ALD.html","",""],["ALD::API","","ALD/API.html","","<p>Access the ALD API programatically.\n"],["ALD::API::AuthenticationError","","ALD/API/AuthenticationError.html","",""],["ALD::API::Collection","","ALD/API/Collection.html","","<p>Base class for collections of entries returned by a request to the ALD API.\n<p>Child classes inheriting from …\n"],["ALD::API::Collection::LocalFilter","","ALD/API/Collection/LocalFilter.html","","<p>Used by ItemCollection/UserCollection#where to filter data locally if\npossible. All methods are module …\n"],["ALD::API::CollectionEntry","","ALD/API/CollectionEntry.html","","<p>Base class for entries in a collection returned by the ALD API. This class\nis used internally and should …\n"],["ALD::API::Conditioned","","ALD/API/Conditioned.html","","<p>used by Collection classes to work with special conditions in #where.\n<p>Requires @conditions to be the instance&#39;s …\n"],["ALD::API::InvalidAuthError","","ALD/API/InvalidAuthError.html","",""],["ALD::API::Item","","ALD/API/Item.html","","<p>An item (e.g. a library or app) uploaded to an ALD server.\n"],["ALD::API::ItemCollection","","ALD/API/ItemCollection.html","","<p>Represents a (possibly filtered) set of items on an ALD server\n"],["ALD::API::NoAuthError","","ALD/API/NoAuthError.html","",""],["ALD::API::RequestError","","ALD/API/RequestError.html","",""],["ALD::API::UnsupportedAuthMethodError","","ALD/API/UnsupportedAuthMethodError.html","",""],["ALD::API::User","","ALD/API/User.html","","<p>A user registered on an ALD server.\n"],["ALD::API::UserCollection","","ALD/API/UserCollection.html","","<p>Represents a collection of users on an ALD server.\n"],["ALD::Definition","","ALD/Definition.html","","<p>Access information in ALD package definition files.\n"],["ALD::Definition::Generator","","ALD/Definition/Generator.html","",""],["ALD::InvalidDefinitionError","","ALD/InvalidDefinitionError.html","",""],["ALD::InvalidPackageError","","ALD/InvalidPackageError.html","",""],["ALD::NoDefinitionError","","ALD/NoDefinitionError.html","",""],["ALD::Package","","ALD/Package.html","","<p>Represents an ALD package file containing an app or library and its\ndefinition.\n"],["ALD::Package::Generator","","ALD/Package/Generator.html","",""],["[]","ALD::API::Collection","ALD/API/Collection.html#method-i-5B-5D","(*args)","<p>Access an entry in the collection.\n<p>Actual arguments and behaviour depends on child classes.\n<p>Returns\n"],["[]","ALD::API::ItemCollection","ALD/API/ItemCollection.html#method-i-5B-5D",null,"<p>Access an individual item by ID, name and version or index in the\ncollection. This method may trigger …\n"],["[]","ALD::API::UserCollection","ALD/API/UserCollection.html#method-i-5B-5D",null,"<p>Access an individual user in the collection.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">api</span>.<span class=\"ruby-identifier\">users</span>[<span class=\"ruby-string\">&#39;Fred&#39;</span>].<span class=\"ruby-identifier\">name</span> <span class=\"ruby-comment\"># =&gt; &#39;Fred&#39;</span>\n</pre>\n"],["apply_conditions","ALD::API::Collection::LocalFilter","ALD/API/Collection/LocalFilter.html#method-c-apply_conditions","(data, conditions)","<p>Apply certain conditions on given data. This is a wrapper method that calls\n::filter, ::sort (if necessary) …\n"],["array_queries","ALD::API::Conditioned","ALD/API/Conditioned.html#method-i-array_queries","(conds)","<p>The HTTP query conditions for queries for an array of values for the given\nconditions.\n<p>conds &mdash; an Array …\n\n"],["attribute_hash","ALD::Definition","ALD/Definition.html#method-i-attribute_hash","(xpath, keys)","<p>Get an Array of attribute Hashes from a list of elements in the definition.\n<p>xpath &mdash; the XPath String pointing …\n"],["auth=","ALD::API","ALD/API.html#method-i-auth-3D","(auth)","<p>Set authentication information for future requests.\n<p>auth &mdash; a Hash containing the authentication information: …\n"],["auth_method","ALD::API","ALD/API.html#method-i-auth_method","(response)","<p>Get the authentication method used by a server\n<p>response &mdash; the Net::HTTPResponse to examine\n\n<p>Returns\n"],["authors","ALD::API::Item","ALD/API/Item.html#method-i-authors",null,"<p>get author information from the item. This method might trigger a HTTP\nrequest.\n<p>Returns\n<p>Returns an Array …\n"],["authors","ALD::Definition","ALD/Definition.html#method-i-authors","()","<p>Get the item&#39;s authors information\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">definition</span>.<span class=\"ruby-identifier\">authors</span>.<span class=\"ruby-identifier\">each</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">author</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-node\">&quot;Author: #{author[&#39;name&#39;]}&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["can_apply?","ALD::API::Collection::LocalFilter","ALD/API/Collection/LocalFilter.html#method-c-can_apply-3F","(conditions, local_keys)","<p>Test if the given filter, sort and range conditions can be applied locally\nor need a request to the server. …\n"],["close","ALD::Package","ALD/Package.html#method-i-close","()","<p>Closes a no longer required package. While this method has little effect\nfor now, calling it should be …\n"],["create_request","ALD::API","ALD/API.html#method-i-create_request","(method, url)","<p>Create a new Net::HTTPRequest for the given method.\n<p>method &mdash; a Symbol indicating the HTTP verb (lowercase …\n"],["define_attributes!","ALD::API::CollectionEntry","ALD/API/CollectionEntry.html#method-c-define_attributes-21","()","<p>Dynamically define attributes determined by child classes. This is called\nby ::new to define the attributes …\n"],["definition","ALD::Package::Generator","ALD/Package/Generator.html#method-i-definition","()",""],["description","ALD::API::Item","ALD/API/Item.html#method-i-description",null,"<p>Get the item&#39;s description text. This method might trigger a HTTP\nrequest.\n<p>Returns\n<p>Returns a String …\n"],["description","ALD::Definition","ALD/Definition.html#method-i-description","()","<p>Get the defined item&#39;s description.\n<p>Returns\n<p>Returns the description String.\n"],["downloads","ALD::API::Item","ALD/API/Item.html#method-i-downloads",null,"<p>Get the number of downloads for the item. This method might trigger a HTTP\nrequest.\n<p>Returns\n<p>Returns an …\n"],["each","ALD::API::Collection","ALD/API/Collection.html#method-i-each","()","<p>Iterate over the entries in this collection\n<p>Yields an entry, as returned by #entry\n"],["entry","ALD::API::ItemCollection","ALD/API/ItemCollection.html#method-i-entry","(hash, initialized = false)","<p>Used by Collection#each and Collection#[] to create new items.\n<p>hash &mdash; a Hash describing the item, with the …\n"],["entry","ALD::API::UserCollection","ALD/API/UserCollection.html#method-i-entry","(hash, initialized = false)","<p>Used by Collection#each and Collection#[] to create new users.\n<p>hash &mdash; a Hash describing the item, with the …\n"],["entry_filter","ALD::API::Collection","ALD/API/Collection.html#method-i-entry_filter","(args)","<p>Get filter conditions for an entry. Used by #[] to get an entry based on\nthe given arguments.\n<p>This method …\n"],["entry_filter","ALD::API::ItemCollection","ALD/API/ItemCollection.html#method-i-entry_filter","(args)","<p>Implements item access for #[]. See Collection#entry_filter for more\ninformation.\n<p>ItemCollection allows …\n"],["entry_filter","ALD::API::UserCollection","ALD/API/UserCollection.html#method-i-entry_filter","(args)","<p>Implements user access for #[]. See Collection#entry_filter for more\ninformation.\n<p>UserCollection allows …\n"],["exact_queries","ALD::API::Conditioned","ALD/API/Conditioned.html#method-i-exact_queries","(conds)","<p>The HTTP query conditions for exact queries for a set of given conditions.\n<p>conds &mdash; an Array of Strings, …\n\n"],["filter","ALD::API::Collection::LocalFilter","ALD/API/Collection/LocalFilter.html#method-c-filter","(data, conditions)","<p>Filter the given data locally. This does not support range or switch\nconditions. Array conditions also …\n"],["from_package","ALD::Package::Generator","ALD/Package/Generator.html#method-c-from_package","(package)",""],["generate!","ALD::Definition::Generator","ALD/Definition/Generator.html#method-i-generate-21","()",""],["generate!","ALD::Package::Generator","ALD/Package/Generator.html#method-i-generate-21","(path)","<p>Creates a new package file from the given data\n<p>generator &mdash; an ALD::Package::Generator instance to create …\n"],["id","ALD::API::User","ALD/API/User.html#method-i-id",null,"<p>Get the user&#39;s ID.\n<p>Returns\n<p>Returns a 32-character string containing the user&#39;s GUID.\n"],["id","ALD::Definition","ALD/Definition.html#method-i-id",null,"<p>Gets the ID of the item to be represented by this definition.\n<p>Examples\n\n<pre>puts &quot;Item ID: #{definition.id}&quot;</pre>\n"],["initialized?","ALD::API::Collection","ALD/API/Collection.html#method-i-initialized-3F","()","<p>Indicate if all data in this collection is present. If false, accessing an\nentry or iterating over entries …\n"],["initialized?","ALD::API::CollectionEntry","ALD/API/CollectionEntry.html#method-i-initialized-3F","()","<p>Indicate whether all data concerning this entry is available or not. If\nfalse, a property retrieval from …\n"],["initialized_attributes","ALD::API::CollectionEntry","ALD/API/CollectionEntry.html#method-c-initialized_attributes","()","<p>Child classes override this to specify attributes that are always present\nin @data. For each such attribute, …\n"],["initialized_attributes","ALD::API::Item","ALD/API/Item.html#method-c-initialized_attributes","()","<p>Override of CollectionEntry#initialized_attributes to enable automatic\nmethod definition, in this case …\n"],["initialized_attributes","ALD::API::User","ALD/API/User.html#method-c-initialized_attributes","()","<p>Override of CollectionEntry#initialized_attributes to enable automatic\nmethod definition, in this case …\n"],["item","ALD::API","ALD/API.html#method-i-item","(*args)","<p>Get an individual item. This method is roughly equivalent to calling\nItemCollection#[] on API#items. …\n"],["item","ALD::API::Item","ALD/API/Item.html#method-i-item",null,"<p>Get the ID of the item.\n<p>Examples\n\n<pre>puts item.id</pre>\n"],["items","ALD::API","ALD/API.html#method-i-items","(conditions = nil)","<p>Get a collection of items from this server. This calls ItemCollection#where\non the collection of all …\n"],["joined","ALD::API::User","ALD/API/User.html#method-i-joined",null,"<p>Get the user&#39;s registration date. This method might trigger a HTTP\nrequest.\n<p>Returns\n<p>Returns a DateTime …\n"],["links","ALD::Definition","ALD/Definition.html#method-i-links","()","<p>Gets additional links this definition references\n<p>Returns\n<p>Returns an Array of Hashes, where each Hash has …\n"],["mailMD5","ALD::API::User","ALD/API/User.html#method-i-mailMD5","()","<p>Get the MD5 hash of the user&#39;s mail adress. This method might trigger a\nHTTP request.\n<p>Returns\n<p>Returns …\n"],["merge_conditions","ALD::API::Conditioned","ALD/API/Conditioned.html#method-i-merge_conditions","(conditions)","<p>Merge new conditions with the current ones.\n<p>conditions &mdash; the new condition Hash to merge\n\n<p>Returns\n"],["merge_ranges","ALD::API::Conditioned","ALD/API/Conditioned.html#method-i-merge_ranges","(key, old, new)","<p>Handle condition conflicts for range conditions. Used by #where.\n<p>key &mdash; the Symbol key whose range is merged …\n"],["name","ALD::API::Item","ALD/API/Item.html#method-i-name",null,"<p>Get the name of the item.\n<p>Examples\n\n<pre>puts &quot;Item: #{item.name}&quot;</pre>\n"],["name","ALD::API::User","ALD/API/User.html#method-i-name",null,"<p>Get the user&#39;s name\n<p>Returns\n<p>Returns a String containing the user&#39;s name.\n"],["name","ALD::Definition","ALD/Definition.html#method-i-name",null,"<p>Gets the name of the item defined by this definition.\n<p>Examples\n\n<pre>puts &quot;The item is called &#39;#{definition.name}&#39;&quot;</pre>\n"],["new","ALD::API","ALD/API.html#method-c-new","(root_url)","<p>Create a new instance to access an ALD server.\n<p>root_url &mdash; a String pointing to the root URL of the server&#39;s …\n\n"],["new","ALD::API::Collection","ALD/API/Collection.html#method-c-new","(api, conditions = {}, data = nil)","<p>Create a new Collection\n<p>api &mdash; the ALD::API instance this collection belongs to\n<p>conditions &mdash; a Hash of conditions …\n"],["new","ALD::API::CollectionEntry","ALD/API/CollectionEntry.html#method-c-new","(api, data, initialized = false)","<p>Create a new entry with the given data\n<p>api &mdash; the ALD:API instance this entry belongs to\n<p>data &mdash; the initial, …\n"],["new","ALD::API::Item","ALD/API/Item.html#method-c-new","(api, data, initialized = false)","<p>Create a new instance for given data. This method should not called by\nlibrary consumers. Instead access …\n"],["new","ALD::API::ItemCollection","ALD/API/ItemCollection.html#method-c-new","(api, conditions = {}, data = nil)","<p>Create a new instance. This should not be called by library consumers.\nInstead use API#items or #where …\n"],["new","ALD::API::User","ALD/API/User.html#method-c-new","(api, data, initialized = false)","<p>Create a new instance. This method is called by API#user and should not be\ncalled by library consumers. …\n"],["new","ALD::API::UserCollection","ALD/API/UserCollection.html#method-c-new","(api, conditions = {}, data = nil)","<p>Create a new collection instance. Library consumers should not directly\ncall this, but instead obtain …\n"],["new","ALD::Definition","ALD/Definition.html#method-c-new","(source)","<p>Open a new definition file for analysis.\n<p>source &mdash; the source to read the definition from. This can be a …\n\n"],["new","ALD::Package","ALD/Package.html#method-c-new","(file)","<p>Opens a new ALD package file.\n<p>file &mdash; a String representing the path to the file or a Zip::File instance …\n\n"],["normalize_id","ALD::API","ALD/API.html#method-i-normalize_id","(id)","<p>Given a GUID string, bring it into a standardized form. This is used\ninternally to make comparing GUIDs …\n"],["open","ALD::Package","ALD/Package.html#method-c-open","(file)","<p>Alias for ::new\n"],["present_conditions","ALD::API::Conditioned","ALD/API/Conditioned.html#method-i-present_conditions","(conds)","<p>Get the subset of conditions that are present on the instance\n<p>conds &mdash; an Array of Strings, containing the …\n\n"],["privileges","ALD::API::User","ALD/API/User.html#method-i-privileges",null,"<p>Get the user&#39;s privileges on the ALD server. This method might trigger\na HTTP request.\n<p>Returns\n<p>Returns …\n"],["range_condition_queries","ALD::API::Conditioned","ALD/API/Conditioned.html#method-i-range_condition_queries","(conds)","<p>The HTTP query conditions for queries with conditions that allow specifying\na range of values.\n<p>conds &mdash; "],["range_offset","ALD::API::Conditioned","ALD/API/Conditioned.html#method-i-range_offset","(new_range)","<p>Compute an absolute Range from a given relative Range. As ranges specified\nin #where are relative to …\n"],["range_query","ALD::API::Conditioned","ALD/API/Conditioned.html#method-i-range_query","()","<p>The HTTP query conditions for the range specified in the instance&#39;s\nconditions.\n<p>Returns\n<p>Returns a  …\n"],["ratings","ALD::API::Item","ALD/API/Item.html#method-i-ratings",null,"<p>Get the ratings the item was given. This method might trigger a HTTP\nrequest.\n<p>Returns\n<p>Returns an Array …\n"],["request","ALD::API","ALD/API.html#method-i-request","(url, method = :get, headers = {}, body = nil)","<p>Make a raw request to the ALD server. This is used internally, and library\nconsumers should only call …\n"],["request","ALD::API::Item","ALD/API/Item.html#method-i-request","()","<p>If the item was initialized with only mandatory data, use the API to\nrequest all missing information. …\n"],["request","ALD::API::ItemCollection","ALD/API/ItemCollection.html#method-i-request","()","<p>Make a HTTP request to the ALD server to get the list of item hashes\nmatching this collection&#39;s conditions. …\n"],["request","ALD::API::User","ALD/API/User.html#method-i-request","()","<p>If the data given to the constructor was not complete, use the API to\nrequest further information from …\n"],["request","ALD::API::UserCollection","ALD/API/UserCollection.html#method-i-request","()","<p>Make a HTTP request to the ALD server to get the list of user hashes\nmatching this collection&#39;s conditions. …\n"],["request_entry","ALD::API::ItemCollection","ALD/API/ItemCollection.html#method-i-request_entry","(filter)","<p>Make a HTTP request to the ALD server to get a single item. Used by\nCollection#[].\n<p>filter &mdash; a filter Hash …\n\n"],["request_entry","ALD::API::UserCollection","ALD/API/UserCollection.html#method-i-request_entry","(filter)","<p>Make a HTTP request to the ALD server to get a single user. Used by\nCollection#[].\n<p>filter &mdash; a filter Hash …\n\n"],["request_with_auth","ALD::API","ALD/API.html#method-i-request_with_auth","(http, request, url, failed_response)","<p>Retry a request with authentication\n<p>http &mdash; a Net::HTTP object to use for the request\n<p>request &mdash; the Net::HTTPRequest …\n"],["requested_attributes","ALD::API::CollectionEntry","ALD/API/CollectionEntry.html#method-c-requested_attributes","()","<p>Child classes override this to specify attributes that are\n<strong>not</strong> always present in @data. For each such …\n"],["requested_attributes","ALD::API::Item","ALD/API/Item.html#method-c-requested_attributes","()","<p>Override of CollectionEntry#requested_attributes to enable automatic method\ndefinition.\n<p>Returns\n<p>Returns …\n"],["requested_attributes","ALD::API::User","ALD/API/User.html#method-c-requested_attributes","()","<p>Override of CollectionEntry#requested_attributes to enable automatic method\ndefinition, in this case …\n"],["reviewed","ALD::API::Item","ALD/API/Item.html#method-i-reviewed",null,"<p>Get if the item has been marked as reviewed by the ALD server. This method\nmight trigger a HTTP request. …\n"],["schema","ALD::Definition","ALD/Definition.html#method-c-schema","()","<p>The XML Schema instance used for validation\n<p>Returns\n<p>Returns the Nokogiri::XML::Schema instance representing …\n"],["sort","ALD::API::Collection::LocalFilter","ALD/API/Collection/LocalFilter.html#method-c-sort","(data, sort)","<p>Sort the given data locally\n<p>data &mdash; the Array of Hashes representing entries\n<p>sort &mdash; either: a Hash, associating …\n"],["sort_criteria","ALD::API::Collection::LocalFilter","ALD/API/Collection/LocalFilter.html#method-c-sort_criteria","(sort)","<p>The inverse of ::to_sort_hash.\n<p>sort &mdash; an Array or Hash, in the format described in ::sort\n\n<p>Returns\n"],["sort_query","ALD::API::Conditioned","ALD/API/Conditioned.html#method-i-sort_query","()","<p>The HTTP query conditions for the sorting specified in the instance&#39;s\nconditions.\n<p>Returns\n<p>Returns a …\n"],["sortings","ALD::API::Collection::LocalFilter","ALD/API/Collection/LocalFilter.html#method-c-sortings","(sort, a, b)","<p>Get the sort order for given criteria.\n<p>sort &mdash; a Hash as described in ::sort a, b - the Hashes to compare …\n\n"],["summary","ALD::API::Item","ALD/API/Item.html#method-i-summary",null,"<p>Get the item&#39;s summary text. This method might trigger a HTTP request.\n<p>Returns\n<p>Returns a String summarizing …\n"],["summary","ALD::Definition","ALD/Definition.html#method-i-summary",null,"<p>Gets the item&#39;s summary text.\n<p>Examples\n\n<pre>puts &quot;\\n#{definition.summary}\\n&quot;</pre>\n"],["switch_queries","ALD::API::Conditioned","ALD/API/Conditioned.html#method-i-switch_queries","(conds)","<p>The HTTP query conditions for queries with conditions that can be switched\non, off or indeterminate. …\n"],["tags","ALD::API::Item","ALD/API/Item.html#method-i-tags",null,"<p>Get the tags the item was tagged with. This method might trigger a HTTP\nrequest.\n<p>Returns\n<p>Returns an Array …\n"],["tags","ALD::Definition","ALD/Definition.html#method-i-tags","()","<p>Get the defined item&#39;s tags.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">definition</span>.<span class=\"ruby-identifier\">tags</span>.<span class=\"ruby-identifier\">each</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">tag</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-node\">&quot; - #{tag}&quot;</span> }\n</pre>\n"],["to_s","ALD::Definition","ALD/Definition.html#method-i-to_s","()","<p>Get the XML string representing the definition\n"],["to_sort_hash","ALD::API::Collection::LocalFilter","ALD/API/Collection/LocalFilter.html#method-c-to_sort_hash","(sort)","<p>Create a sorting Hash from an Array.\n<p>sort &mdash; a Hash or Array, in the format described in ::sort\n\n<p>Returns\n"],["type","ALD::Definition","ALD/Definition.html#method-i-type",null,"<p>Gets the type of item this definition represents.\n<p>Examples\n\n<pre>puts &quot;Item type is #{definition.type}&quot;</pre>\n"],["uploaded","ALD::API::Item","ALD/API/Item.html#method-i-uploaded",null,"<p>Get the time the item was uploaded. This method might trigger a HTTP\nrequest.\n<p>Returns\n<p>Returns a DateTime …\n"],["user","ALD::API","ALD/API.html#method-i-user","(*args)","<p>Get an individual user. This method is roughly equivalent to calling\nUserCollection#[] on API#users. …\n"],["user","ALD::API::Item","ALD/API/Item.html#method-i-user",null,"<p>Get the user who owns the item. This method might trigger a HTTP request.\n<p>Returns\n<p>Returns the ALD::API::User …\n"],["users","ALD::API","ALD/API.html#method-i-users","(conditions = nil)","<p>Get a collection of users on this server. This calls UserCollection#where\non the collection of all users. …\n"],["valid?","ALD::Definition","ALD/Definition.html#method-i-valid-3F","()","<p>Check if the definition is valid. Library consumers need not call this, as\n::new already does.\n<p>Returns …\n"],["valid?","ALD::Definition::Generator","ALD/Definition/Generator.html#method-i-valid-3F","()",""],["valid?","ALD::Package","ALD/Package.html#method-c-valid-3F","(file, definition)","<p>Tests if a given archive is a valid ALD package. Although part of the\npublic API, most library consumers …\n"],["valid?","ALD::Package::Generator","ALD/Package/Generator.html#method-i-valid-3F","()",""],["valid_auth?","ALD::API","ALD/API.html#method-i-valid_auth-3F","(auth)","<p>Check if a Hash contains valid auth data\n<p>auth &mdash; the Hash to check\n\n<p>Returns\n"],["valid_data?","ALD::API::Item","ALD/API/Item.html#method-c-valid_data-3F","(data)","<p>Ensure a Hash contains all information necessary to be passed to #new.\n<p>data &mdash; the Hash to check for mandatory …\n\n"],["version","ALD::API","ALD/API.html#method-i-version","()","<p>Get the API version supported by the server. This method triggers a HTTP\nrequest.\n<p>Returns\n<p>Returns the semver …\n"],["version","ALD::API::Item","ALD/API/Item.html#method-i-version",null,"<p>Get the item version.\n<p>Examples\n\n<pre>puts &quot;#{item.name} v#{item.version}&quot;</pre>\n"],["version","ALD::Definition","ALD/Definition.html#method-i-version",null,"<p>Gets the semver version of this definition&#39;s item.\n<p>Examples\n\n<pre>puts &quot;#{definition.name} v#{definition.version}&quot;</pre>\n"],["where","ALD::API::Conditioned","ALD/API/Conditioned.html#method-i-where","(conditions)","<p>Filter the Collection&#39;s data. See the documentation on the individual\nclasses for more information. …\n"],["where","ALD::API::ItemCollection","ALD/API/ItemCollection.html#method-i-where",null,"<p>Filter and/or sort this collection and return a new collection containing a\nsubset of its items.\n<p>conditions … &mdash; "],["where","ALD::API::UserCollection","ALD/API/UserCollection.html#method-i-where",null,"<p>Return a new collection containing a subset of the users in this\ncollection.\n<p>conditions &mdash; a Hash of conditions …\n"]]}}